class DisjointSet:
    def __init__(self, n):
        self.li = [i for i in range(n)]
        self.rank = [1 for _ in range(n)]
    def find(self, x):
        if self.li[x] == x:
            return x
        res = self.find(self.li[x])
        self.li[x] = res
        return res
    def join(self, x, y):
        xRoot, yRoot = self.find(x), self.find(y)
        if xRoot == yRoot:
            return 0    
        if self.rank[xRoot] > self.rank[yRoot]:
            self.rank[xRoot] += self.rank[yRoot]
            self.li[yRoot] = xRoot
        else:
            self.rank[yRoot] += self.rank[xRoot]
            self.li[xRoot] = yRoot


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        ds = DisjointSet(n)

        for i in range(n):
            for j in range(n):
                if i != j and graph[i][j] == 1:
                    ds.join(i, j)
        
        print(ds.li)
        print(ds.rank)
        
        counter = collections.defaultdict(int)
        for node in initial:
            root = ds.find(node)
            counter[root] += 1

        print(counter)

        rootNode = set()
        for node in counter:
            if counter[node] == 1:
                rootNode.add(node)
        if not rootNode:
            return min(initial)
        
        biggest = -1
        res = n
        for node in initial:
            
            root = ds.find(node)
            if root not in rootNode:
                continue
            
            if biggest < ds.rank[root]:
                biggest = ds.rank[root]
                res = node
            elif biggest == ds.rank[root]:
                res = min(res, node)
        return res
        
